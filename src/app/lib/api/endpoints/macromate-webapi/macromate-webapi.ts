/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Flekt
 * OpenAPI spec version: v1
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type {
  MacroMateWebApiFeaturesUsersHandlersAddFamilyMemberEndpointRequest,
  MacroMateWebApiFeaturesUsersHandlersAuthenticateUserResult,
  MacroMateWebApiFeaturesUsersHandlersAuthenticateWorkOsUserRequest,
  MacroMateWebApiFeaturesUsersHandlersWorkOsRedirectRequest,
  MacroMateWebApiFeaturesUsersHandlersWorkOsRedirectResponse,
} from "../../models";

import { fetcher } from "../../fetcher";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getAddFamilyMemberUrl = () => {
  return `/family/members`;
};

export const addFamilyMember = async (
  macroMateWebApiFeaturesUsersHandlersAddFamilyMemberEndpointRequest: MacroMateWebApiFeaturesUsersHandlersAddFamilyMemberEndpointRequest,
  options?: RequestInit,
): Promise<void> => {
  return fetcher<void>(getAddFamilyMemberUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(
      macroMateWebApiFeaturesUsersHandlersAddFamilyMemberEndpointRequest,
    ),
  });
};

export const getAddFamilyMemberMutationOptions = <
  TError = string,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addFamilyMember>>,
    TError,
    {
      data: MacroMateWebApiFeaturesUsersHandlersAddFamilyMemberEndpointRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetcher>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addFamilyMember>>,
  TError,
  { data: MacroMateWebApiFeaturesUsersHandlersAddFamilyMemberEndpointRequest },
  TContext
> => {
  const mutationKey = ["addFamilyMember"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addFamilyMember>>,
    { data: MacroMateWebApiFeaturesUsersHandlersAddFamilyMemberEndpointRequest }
  > = (props) => {
    const { data } = props ?? {};

    return addFamilyMember(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddFamilyMemberMutationResult = NonNullable<
  Awaited<ReturnType<typeof addFamilyMember>>
>;
export type AddFamilyMemberMutationBody =
  MacroMateWebApiFeaturesUsersHandlersAddFamilyMemberEndpointRequest;
export type AddFamilyMemberMutationError = string;

export const useAddFamilyMember = <
  TError = string,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addFamilyMember>>,
    TError,
    {
      data: MacroMateWebApiFeaturesUsersHandlersAddFamilyMemberEndpointRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetcher>;
}): UseMutationResult<
  Awaited<ReturnType<typeof addFamilyMember>>,
  TError,
  { data: MacroMateWebApiFeaturesUsersHandlersAddFamilyMemberEndpointRequest },
  TContext
> => {
  const mutationOptions = getAddFamilyMemberMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getAuthenticateWorkOsUserUrl = () => {
  return `/auth/workos`;
};

export const authenticateWorkOsUser = async (
  macroMateWebApiFeaturesUsersHandlersAuthenticateWorkOsUserRequest: MacroMateWebApiFeaturesUsersHandlersAuthenticateWorkOsUserRequest,
  options?: RequestInit,
): Promise<MacroMateWebApiFeaturesUsersHandlersAuthenticateUserResult> => {
  return fetcher<MacroMateWebApiFeaturesUsersHandlersAuthenticateUserResult>(
    getAuthenticateWorkOsUserUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(
        macroMateWebApiFeaturesUsersHandlersAuthenticateWorkOsUserRequest,
      ),
    },
  );
};

export const getAuthenticateWorkOsUserMutationOptions = <
  TError = string,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authenticateWorkOsUser>>,
    TError,
    { data: MacroMateWebApiFeaturesUsersHandlersAuthenticateWorkOsUserRequest },
    TContext
  >;
  request?: SecondParameter<typeof fetcher>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authenticateWorkOsUser>>,
  TError,
  { data: MacroMateWebApiFeaturesUsersHandlersAuthenticateWorkOsUserRequest },
  TContext
> => {
  const mutationKey = ["authenticateWorkOsUser"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authenticateWorkOsUser>>,
    { data: MacroMateWebApiFeaturesUsersHandlersAuthenticateWorkOsUserRequest }
  > = (props) => {
    const { data } = props ?? {};

    return authenticateWorkOsUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthenticateWorkOsUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof authenticateWorkOsUser>>
>;
export type AuthenticateWorkOsUserMutationBody =
  MacroMateWebApiFeaturesUsersHandlersAuthenticateWorkOsUserRequest;
export type AuthenticateWorkOsUserMutationError = string;

export const useAuthenticateWorkOsUser = <
  TError = string,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authenticateWorkOsUser>>,
    TError,
    { data: MacroMateWebApiFeaturesUsersHandlersAuthenticateWorkOsUserRequest },
    TContext
  >;
  request?: SecondParameter<typeof fetcher>;
}): UseMutationResult<
  Awaited<ReturnType<typeof authenticateWorkOsUser>>,
  TError,
  { data: MacroMateWebApiFeaturesUsersHandlersAuthenticateWorkOsUserRequest },
  TContext
> => {
  const mutationOptions = getAuthenticateWorkOsUserMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getFinishOnboardingUrl = () => {
  return `/finish-onboarding`;
};

export const finishOnboarding = async (
  options?: RequestInit,
): Promise<void> => {
  return fetcher<void>(getFinishOnboardingUrl(), {
    ...options,
    method: "POST",
  });
};

export const getFinishOnboardingMutationOptions = <
  TError = string,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof finishOnboarding>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof fetcher>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof finishOnboarding>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["finishOnboarding"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof finishOnboarding>>,
    void
  > = () => {
    return finishOnboarding(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type FinishOnboardingMutationResult = NonNullable<
  Awaited<ReturnType<typeof finishOnboarding>>
>;

export type FinishOnboardingMutationError = string;

export const useFinishOnboarding = <
  TError = string,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof finishOnboarding>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof fetcher>;
}): UseMutationResult<
  Awaited<ReturnType<typeof finishOnboarding>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getFinishOnboardingMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getWorkOsRedirectUrl = () => {
  return `/auth/workos/redirect`;
};

export const workOsRedirect = async (
  macroMateWebApiFeaturesUsersHandlersWorkOsRedirectRequest: MacroMateWebApiFeaturesUsersHandlersWorkOsRedirectRequest,
  options?: RequestInit,
): Promise<MacroMateWebApiFeaturesUsersHandlersWorkOsRedirectResponse> => {
  return fetcher<MacroMateWebApiFeaturesUsersHandlersWorkOsRedirectResponse>(
    getWorkOsRedirectUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(
        macroMateWebApiFeaturesUsersHandlersWorkOsRedirectRequest,
      ),
    },
  );
};

export const getWorkOsRedirectMutationOptions = <
  TError = string,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workOsRedirect>>,
    TError,
    { data: MacroMateWebApiFeaturesUsersHandlersWorkOsRedirectRequest },
    TContext
  >;
  request?: SecondParameter<typeof fetcher>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof workOsRedirect>>,
  TError,
  { data: MacroMateWebApiFeaturesUsersHandlersWorkOsRedirectRequest },
  TContext
> => {
  const mutationKey = ["workOsRedirect"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof workOsRedirect>>,
    { data: MacroMateWebApiFeaturesUsersHandlersWorkOsRedirectRequest }
  > = (props) => {
    const { data } = props ?? {};

    return workOsRedirect(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type WorkOsRedirectMutationResult = NonNullable<
  Awaited<ReturnType<typeof workOsRedirect>>
>;
export type WorkOsRedirectMutationBody =
  MacroMateWebApiFeaturesUsersHandlersWorkOsRedirectRequest;
export type WorkOsRedirectMutationError = string;

export const useWorkOsRedirect = <
  TError = string,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workOsRedirect>>,
    TError,
    { data: MacroMateWebApiFeaturesUsersHandlersWorkOsRedirectRequest },
    TContext
  >;
  request?: SecondParameter<typeof fetcher>;
}): UseMutationResult<
  Awaited<ReturnType<typeof workOsRedirect>>,
  TError,
  { data: MacroMateWebApiFeaturesUsersHandlersWorkOsRedirectRequest },
  TContext
> => {
  const mutationOptions = getWorkOsRedirectMutationOptions(options);

  return useMutation(mutationOptions);
};
